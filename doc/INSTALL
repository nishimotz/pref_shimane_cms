=CMSのインストール手順書

#######################
==動作環境
#######################

* Debian gnu/linux etch

#######################
== インストール
#######################

=== 必要なパッケージのインストール

  本プログラムの動作に必要なプログラムをインストールします。
  必要となるdebianのパッケージにnon-freeセクションに含まれるものがあるので、/etc/apt/sources.listを変更し、non-freeのパッケージをインストールできるようにしておいてください。

  * debianパッケージのインストール

      $ sudo apt-get install ruby irb ruby1.8-dev libpgsql-ruby1.8 libfcgi-ruby1.8 librmagick-ruby1.8 libopenssl-ruby1.8 rdoc zlib1g-dev lighttpd apache2 postgresql postfix chasen chasen-dictutils libchasen-dev ipadic kakasi libkakasi-ruby1.8 zip unzip rsync libgd2-xpm libgd-ruby1.8 libxslt1-dev xsltproc gcc make libtmail-ruby1.8

  * ruby-gemパッケージのインストール

    まずhttp://www.rubygems.org/からRubyGemsの最新版をインストールします。

      $ wget http://rubyforge.org/frs/download.php/38646/rubygems-?.?.?.tgz
      $ cd rubygems-?.?.?
      $ sudo ruby setup.rb

  必要なgemパッケージをインストールします。

      $ sudo gem install rake scrapi tidy --include-dependencies

  * その他、必要なプログラム

    音声合成やルビ振りのページの作成のために,rubyからchasenを使用するためのライブラリが必要です。 それらのパッケージをダウンロードしてインストールします。
      $ wget http://raa.ruby-lang.org/cache/ruby-chasen/chasen1.6.tar.gz
      $ tar zxvf chasen1.6.tar.gz
      $ cd chasen1.6
      $ ruby extconf.rb
      $ make
      $ sudo make install

   音声合成プログラムであるlameをダウンロードし、インストールします。

      $ wget http://downloads.sourceforge.net/lame/lame-3.97.tar.gz
      $ tar zxvf lame-3.97.tar.gz
      $ cd lame-3.97
      $ ./configure
      $ make
      $ sudo make install


=== 本プログラムのインストール

  本プログラムは以下のようなディレクトリ配置を想定して作成されています。

    * プログラム本体
        /var/share/cms/ (所有者www-dataユーザ)

    * 公開ページのdoc root
        /var/www/cms/  (所有者www-dataユーザ)

  インストールの際は必要に応じてディレクトリを作成し、本プログラムを/var/share/cms/にcopyしてください。

      $ sudo mkdir -p /var/share/cms
      $ sudo chown -R www-data:www-data /var/share/cms
      $ tar zxvf pref-shimane-cms-1.0.2.tar.gz
      $ sudo -u www-data mkdir /var/www/cms
      $ sudo -u www-data cp -r pref-shimane-cms-1.0.2/* /var/share/cms/

  * chasen辞書の設定
    CMSでは、ページの読み上げ機能のためにユーザが単語の読みを登録することができます。そのための辞書の作成と、その辞書をchasenが利用できるようにします。

    ユーザ辞書を作成します。

      $ cd /var/share/cms/dict/
      $ sudo -u www-data make

    chasenの辞書のディレクトリにユーザ辞書へのシンボリックリンクを作成します.

      $ sudo ln -s /var/share/cms/dict/user.* /usr/share/chasen/dic/ipadic/

########################
==プログラムの設定
########################

===データベースの設定

(0)データベースユーザの作成

   www-dataという名前でデータベースユーザを作成します。

     $ sudo -u postgres createuser www-data
     Shall the new user be allowed to create databases? (y/n) y
     Shall the new user be allowed to create more new users? (y/n) n

(0)データベースの作成
  テスト用、開発用、本番用のデータベースを作成します。

     $ sudo -u www-data createdb -U www-data cms_test -EUNICODE
     $ sudo -u www-data createdb -U www-data cms_development -EUNICODE
     $ sudo -u www-data createdb -U www-data cms_production -EUNICODE

=== Webサーバの設定

(0)apache2の設定

apache2は静的ページの公開サーバとして使用します。
設定ファイルのテンプレートがdoc/apache2.conf.exampleにあるのでそれをコピーします。

    $ sudo cp /var/share/cms/doc/apache2.conf.example /etc/apache2/sites-available/cms

  ここでは例としポート8000を使用するので（lighttpdとの競合を避けるためです。ご使用の環境に合せて変更してください。）/etc/apache2/ports.confを以下のように編集します。

    $ sudo vi /etc/apache2/ports.conf

       Listen 8000        <== 8000番ポートに変更

  サイトを有効にします。

    $ sudo a2ensite cms

  必要なモジュールを有効にします。

    $ sudo a2enmod rewrite

  サーバを再起動します。

    $ sudo /etc/init.d/apache2 force-reload

(0)lighttpdの設定

  lighttpdはapplicationサーバとして使用します。
  設定ファイルのテンプレートがdoc/lighttpd.conf.exampleにあるのでそれをコピーします。

    $ sudo cp /var/share/cms/doc/lighttpd.conf.example /etc/lighttpd/lighttpd.conf


===本プログラムの設定

==== config/cms.yml.exampleをconfig/cms.ymlとてコピーし、 使用環境に合せて設定を変更します。設定ファイル内の項目については以下を参照して適宜設定してください。

   $ cd /var/share/cms
   $ sudo -u www-data cp config/cms.yml.example config/cms.yml
   $ sudo -u www-data vi config/cms.yml

   ---------------------------------------------------------
     # for export, mail body
      # CMSサーバのURI
     :base_uri: http://localhost/
      # mailサーバのURI
     :mail_uri: http://localhost/
      # 公開サーバのURI
     :public_uri: http://localhost:8000/
      # FTP領域のサーバのURI
     :contents_uri: http://localhost:8000/

      # webサーバのdomain(複数記述可)
      # CMSでページを作成した際に、ページ内容にこれらのドメイン配下のページへの
      # リンクが含まれていると、自動的にリンクが相対パスに書き換えられます。
     :local_domains:
       - localhost

      # ユーザが共通で使用するdomain
     :mail_domain: localhost.localdomain

      # メールサーバの設定
     :mail_config:
       :address: localhost
       :domain: localhost.localdomain
       :port: "25"
       :authentication: :plain

      # 管理者のメールアドレス
     :super_user_mail: webmaster@localhost.localdomain
   ---------------------------------------------------------


==== アプリケーションのトップディレクトリにpublic.ディレクトリを作成し、その中にpublicディレクトリのファイルへのリンクを作成します。(public.の中には公開サーバへsyncするためのファイルが置かれます。)

    $ sudo -u www-data mkdir /var/share/cms/public.
    $ sudo -u www-data ln -s /var/share/cms/public/stylesheets /var/share/cms/public/javascripts /var/share/cms/public/config.html* /var/share/cms/public/images  /var/share/cms/public./


==== データベースへの接続の設定
  config/database.yml.exampleをconfig/database.ymlとしてコピーし、
  usernameの箇所を使用するデータベースのユーザ名に変更します。

    $ sudo -u www-data cp config/database.yml.example config/database.yml
    $ sudo -u www-data vi config/database.yml

      username: www-data

  データベースに初期データを投入します。

    $ sudo -u www-data rake migrate

  データベースにsessionテーブルを作成します。

    $ sudo -u www-data rake create_sessions_table

==== 音声合成プログラムの設定
   音声合成プログラムgtalk, chaoneをコンパイルします。

    $ cd /var/share/cms/tool/gtalk/gtalk
    $ sudo -u www-data ./configure
    $ sudo -u www-data make
    $ cd /var/share/cms/tool/gtalk/morph/chaone-1.2.0
    $ sudo -u www-data ./configure
    $ sudo -u www-data make


==== exportの設定

CMSで作成したcontentsを公開サーバにuploadするスクリプトの設定およびrsyncの設定を行います。 /var/share/cms/tool/exportの以下の箇所を変更します。(line:57 あたり)

    $ cd /var/share/cms
    $ sudo -u www-data vi tool/export

    SERVER = ['localhost']       <== 公開サーバのドメイン
    USER = 'www-data'            <== 公開サーバにrsyncするユーザ

公開サーバにryncするユーザのSSH鍵を公開サーバの同名のユーザの ~/.ssh/authorized_keysに登録します。ここでは、アプリケーションサーバと公開サーバが同じマシンであるとして、設定方法を説明します。

* rsyncユーザのSSH鍵を作成します。(ここではwww-userとします)
  鍵を作成するときパスフレーズは空にします。

    $ sudo -u www-data ssh-keygen -t rsa

* rsyncユーザの鍵を公開サーバのユーザのホームdirectoryの.ssh/authorized_keysに登録します。

    $ sudo -u www-data sh -c 'cat ~www-data/.ssh/id_rsa.pub >> ~www-data/.ssh/authorized_keys'


==== cronの設定

www-dataユーザのcronの設定を行います。
doc/crontab.exampleの内容を確認しcrontabに反映させます。これらのjob中では、cmsで作成されたページの内容を静的なhtmlファイルとして書き出し、それらを公開サーバのdoc rootにsyncすることを行っています。

   $ sudo -u www-data crontab doc/crontab.example

  do_exportファイルが作成することによって静的なhtmlファイルが作成されます。

   $ sudo -u www-data touch /var/share/cms/do_export

do_syncファイルが作成することによってファイルが公開サーバのdocument rootにrsyncされます。

   $ sudo -u www-data touch /var/share/cms/do_sync

上記のファイルを削除すると静的ページの作成や、公開サーバへのsyncが行なわれません。

==== アンケート機能の設定

CMSではアンケートフォーム付きのページを作成することができます。そして、閲覧者がアンケートに回答した結果を確認する機能があります。

アンケート機能を利用するにはenqueteの回答を公開サーバに保存するcgiプログラムの設定と、公開サーバに保存された回答結果をアプリケーションサーバに転送するための設定が必要になります。なお、アンケートの回答結果はGPGにより暗号化して公開サーバからアプリケーションサーバに転送されます。


(0)GPG鍵を作成します。cms(アプリケーションサーバが動作するマシン)で以下のコマンドを実行しGPG鍵を作成します。

    $ sudo -H -u www-data gpg --gen-key

  以下の情報を入力します。
  (メールアドレスドのメイン名は使用環境に合せて変更してください)

  鍵の種類: (1) DSA and Elgamal
  ELG-E鍵のサイズ: 2048
  鍵の有効期限: 0(無期限)
  本名: www-data
  メールアドレス: www-data@'アプリケーションサーバのドメイン'
  コメント:
  パスフレーズ:

    $ sudo mkdir /var/www/.gnupg
    $ sudo chown www-data:www-data /var/www/.gnupg
    $ sudo -u www-data chmod go-xwr /var/www/.gnupg


(0) アプリケーションサーバにフォームデータの受け取り用のSSH鍵を生成します。

* アプリケーションサーバで以下のコマンドを実行しSSH鍵を作成します。
  (passphraseなしでRSAタイプのid_rsa_enqueteという鍵を作成します。)

    $ sudo -H -u www-data ssh-keygen -t rsa -N '' -f ~www-data/.ssh/id_rsa_enquete

(0) GPG鍵とフォームデータ受け取り用SSH鍵の公開鍵を公開サーバに転送します。

* アプリケーションサーバで以下のコマンドを実行し公開鍵を転送します。(ホスト名は使用環境に合わせて変更してください)

    $ sudo -H -u www-data gpg --output /tmp/pgp.pub --export --armor www-data@'アプリケーションサーバのドメイン'
    $ scp -p /tmp/pgp.pub '公開サーバのホスト名':/tmp/pgp.pub
    $ cd ~www-data/.ssh/
    $ scp -p id_rsa_enquete.pub '公開サーバのホスト名':


(0)公開ウェブサーバにGPGの鍵を置くきます。
* www1で以下のコマンドを実行しGPG鍵を作成します。

    $ sudo -H -u www-data gpg --gen-key

  以下の情報を入力します。
  鍵の種類: (1) DSA and Elgamal
  ELG-E鍵のサイズ: 2048
  鍵の有効期限: 0(無期限)
  本名: www-data
  メールアドレス: www-data@'アプリケーションサーバのドメイン名'
  コメント:
  パスフレーズ:

(0) 公開サーバでアプリケーションサーバのGPG鍵をインポート/署名します。

* www1で以下のようにしてインポート/署名します。

     $ sudo -H -u www-data gpg --import /tmp/pgp.pub
     $ sudo -H -u www-data gpg --sign-key www-data@'アプリケーションサーバのドメイン'

(0) 公開サーバでSSHの設定を行います。
* アプリケーションサーバのアンケート用の公開鍵をauthorized_keysに登録します。
     $ sudo -u www-data sh -c 'cat ~www-data/.ssh/id_rsa_enquete.pub >> ~www-data/.ssh/authorized_keys'

* アンケート用の公開鍵を設定します。

     $ sudo -u www-data vi ~www-data/.ssh/authorized_keys

以下の内容にします。SSHの公開鍵部分はアプリケーションサーバで作成したものを指定します。

  no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty,command="/var/share/cms/tool/transfer_form_data /var/share/cms/form_data/enquete" ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAIEA16YlFolM5EQygXZ0JTz0R/JlTi6bbWPwR1f7ebclAbPR0w+7pUu5QN3OnsD3fJHXhKxe+7aKhyaJzqvHoPjZd58kMmRkW/gNs6uQojRuSIAJZViiVGrXUDyk8VRf6Ar+KNW273ZPyVzxkDkhX4zQKhAbBfx+bZVZeT2cTVSY3T8= www-data@localhost

(0) 公開サーバでアンケートのフォームデータを保存するディレクトリを作成します。

     $ sudo mkdir -p /var/share/cms/form_data
     $ cd /var/share/cms/form_data/
     $ sudo mkdir enquete
     $ sudo chown -R www-data:www-data .


(0) 公開サーバにアプリケーションサーバの/var/share/tool/transfer_form_dataを転送します。

     $ sudo mkdir -p /var/share/cms/tool
     $ sudo -u www-data scp -r /var/share/cms/tool/transfer_form_data '公開サーバのホスト名'/var/share/cms/tool/

(0) 公開サーバにアプリケーションサーバの/var/share/cms/cgi-bin/以下のファイルを転送します。

     $ sudo -u www-data scp -r /var/share/cms/cgi-bin/* '公開サーバのホスト名':/var/share/cms/

(0) 公開サーバの/var/share/cms/cgi-bin/post_cgi.conf.exampleをpost_cgi.confとしてコピーし使用環境に合わせて設定を変更します。

     $ cd /var/share/cms/cgi-bin
     $ sudo -u www-data cp post_cgi.conf.example post_cgi.conf
     $ sudo -u www-data vi post_cgi.conf

(0) GPGの動作確認

* 公開サーバで以下のコマンドを実行し、暗号化したファイルを作成します。

    $ sudo -H -u www-data gpg -q --homedir /var/share/www/.gnupg --encrypt --armor -r www-data@'アプリケーションサーバのドメイン名' < /etc/hosts > /tmp/hosts.gpg

* /tmp/hosts.gpgをアプリケーションサーバへ/tmp/hosts.gpgとして転送します。

    $ scp -p /tmp/hosts.gpg 'アプリケーションサーバのホスト名':/tmp/hosts.gpg

* アプリケーションサーバで以下のコマンドを実行し、復号することを確認します．
    $ sudo -H -u www-data gpg -q --homedir ~www-data/.gnupg --decrypt < /tmp/hosts.gpg

==== web monitor機能の設定

公開サーバ上のディレクトリ単位でアクセス制限をかける機能です。
ユーザ名とパスワードを設定することで、特定の閲覧者のみのアクセスを許可します。

認証時に用いるファイルを保存するディレクトリの作成を行います。

  アプリケーションサーバ側
   $ cd /var/share/cms
   $ sudo -u www-data mkdir htpasswd

  公開サーバ側
   $ cd /var/www/
   $ sudo -u www-data mkdir htpasswd

フォルダのアクセス制限にDigest認証を使用するので、apacheのauth_digestモジュールを有効にします。

   $ sudo a2enmod auth_digest

########################
==プログラムの動作テスト
########################
アプリケーションのrootディレクトリでテストを実行します。

  $ cd /var/share/cms
  $ sudo -u www-data rake

    =>テストが開始されます。エラーが発生せずにテストが終了するれば問題ありません。

########################
==プログラムの起動
########################

lighttpdを起動するとプログラムが起動します。

  $ sudo /etc/init.d/lighttpd stop
  $ sudo /etc/init.d/lighttpd start

ブラウザで http://localhost/_adminにアクセスするとログイン画面が表示されます。この時点では運用管理者一人が登録してあります。

ID: super_user, Password: super_userでログインできます。

########################
==公開ページの作成
########################

サーバの初回起動時のみ、以下のコマンドを実行して静的ページを作成します。

  $ sudo -u www-data /var/share/cms/tool/export_all

しばらくすると、cronにより/var/share/cms/public./以下にページが作成され、/var/www/cms/ にページがアップロードされます。作成されたページが、公開サーバのapache2の待機しているURLでアクセスできることを確認してください。

この後は、ページを作成して公開処理を行うと、cronジョブによって自動的にhtmlファイルと音声ファイルがpublic.ディレクトリ以下に作成され、それらのファイルが公開サーバにsyncされます。(exportはcronによって1分ごとに実行されますので、公開処理が完了してからexportの実行までには少しズレがあります)

########################
==プロダクション環境への移行
########################

上記までの設定では、applicationはdevelopment環境で動作します。applicationをproduction環境に移行する場合は以下の手順を踏んで下さい。

* productionデータベースへのデータの移行
* プロダクション環境へのファイルの移行
* 環境変数の設定

(0) productionデータベースへのデータの移行
   以下のようにしてdevelopmentデータベースの内容をproductionへ移行します。

     $ sudo -u www-data sh -c 'pg_dump cms_development | psql cms_production'

(0) production環境へのファイルの移行

   以下のdirectoryをproduction環境にコピーします。

     $ sudo -u www-data cp -r /var/share/cms/files/development /var/share/cms/files/production
     $ sudo -u www-data cp -r /var/share/cms/files/advertisement/development /var/share/cms/files/advertisement/production

(0) 環境変数の設定

   以下のファイルの環境変数RAILS_ENVを設定している箇所を変更します。

   $ sudo -u www-data vi /var/share/cms/config/environment.rb

       ENV['RAILS_ENV'] ||= 'production'   <== コメントを外す

   $ sudo -u www-data vi /var/share/cms/tool/export

       ENV['RAILS_ENV'] ||= 'production'   <== 'production'に変更

最後にlighttpdをrestartするとproduction環境設定は完了です。

########################
==ヘルプシステムのデータをインポート
########################

本システムにはヘルプシステム機能があります。別途配布されているヘルプシステムのデータをインポートすることにより、ブラウザから本システムの使い方を参照することができます。

(0) データの配置

   アプリケーションサーバ上に/var/share/cms/helpを作成し，そこにダウンロードしてきたヘルプシステムのデータをコピーします。

   $ tar zxvf help-data.1.1.tar.gz
   $ sudo -u www-data mkdir /var/shar/cms/help
   $ sudo -u www-data cp -r help-data-<バージョン>/* /var/share/cms/help/

(0) スクリプトの実行

   ヘルプシステムのデータをインポートするスクリプトを実行します。

   $ cd /var/share/cms
   $ sudo -u www-data ruby ./tools/convert_help_data.rb restore

(0) symlinkの作成

   production環境の画像を参照するように、symlinkを作成します。

   $ sudo -u www-data ln -s /var/share/cms/help_files/production /var/share/cms/public/help_images

(0) ヘルプシステムへのアクセス

   http://localhost/_help へアクセスすることで、上記でインポートしたヘルプを参照することができます。

########################
==注意
########################

(0)作成するページには適宜「見出し」を指定してください。特に見出し1、2、3には音声合成にとって意味を持ちます。音声ファイルはそれらの見出し毎に分割されます。見出しの少ないページを作成されますと、音声合成に失敗することがありますのでご注意下さい.なお、音声作成に失敗したページはアプリケーションサーバの /mp3_error_log.html ページで確認することができます。

########################
==最後に
########################

このプログラムを利用して独自のCMSを作成してみて下さい!!
